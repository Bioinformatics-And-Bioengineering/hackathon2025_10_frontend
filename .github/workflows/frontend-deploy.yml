name: Deploy Frontend (Vite) to EC2
on:
  push:
    branches: [ "main" ] 
    paths: 
      - "my-app/**" # 👈 パスもサブディレクトリに変更
      - ".github/workflows/frontend-deploy.yml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # 【追加】ワークフロー全体の作業ディレクトリを 'my-app' に設定
    defaults:
      run:
        working-directory: ./my-app 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies & Build (Vite)
        # working-directory: ./my-app が適用されるため、'my-app/' の中で実行される
        run: |
          # npm ciが 'my-app/package.json' を読み込むようになる
          npm ci 
          npm run build 

      # --- ステップ 1: distを一時ディレクトリへ転送 (scp-action) ---
      - name: Upload dist to EC2 (tmp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FE_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          # 転送元は、working-directory内で生成された 'dist' ディレクトリ
          source: "dist" 
          target: "/home/${{ secrets.SSH_USER }}/" 

      # --- ステップ 2: サーバー側で配置（ssh-action） ---
      # (このステップはサーバー上の操作なので、working-directoryは適用されない)
      - name: Publish on server (atomic swap)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.FE_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            
            SRC_DIR="/home/${{ secrets.SSH_USER }}/dist" 
            TARGET_DIR="${{ secrets.FE_PATH }}"
            
            # 以下、前回の回答で修正済みのデプロイロジック
            sudo mkdir -p "$TARGET_DIR"
            rsync -av --delete "$SRC_DIR"/ "$TARGET_DIR"/
            
            sudo chown -R nginx:nginx "$TARGET_DIR" || true
            sudo find "$TARGET_DIR" -type d -exec chmod 755 {} \;
            sudo find "$TARGET_DIR" -type f -exec chmod 644 {} \;
            
            rm -rf "$SRC_DIR"
            sudo systemctl reload nginx || true
